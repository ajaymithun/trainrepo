package myprograms;

import java.lang.*;//default package in java. import all the classes packages...


import java.lang.System;//import specific classes! improves the performance of the JVM!
import java.lang.String;

//Compiler :: convert the java code to byte code
//Interpreter:: convert the byte code to machine code
/*
 * Package:
 * group of similar types  of classes , interfaces and sub-packages.
 * used for preventing naming conflicts!

 * void::the particular method does not return any value
 * main: entry point method for java 
 * static::doesnt require any object! used for memory management!memory allocated by default by the JVM
 */
//Windows->Show view->.Console,ProjectExplorer menu
//bytecode file takes the classname.class!!(Sample.class)

//class default access specifier is "default"!!!

//public access specifier:: filename and classname must be same!!
//public class Sample123//compilation error

//package,import,class

class Sample  //Bytecode:: Sample.class
{
	public static void main(String[] args)//Command line arguments(String array!)
	{
		//System is a built in class
		//out is a reserved object of java.io.PrintStream class
		//println is a method of PrintStream class

	System.out.println("Hello Java!");
	
	}

}
==========================================================================================
package myprograms;


/*
 * Primitive data types::
 * 
 * boolean(true or false)ex:boolean attendance;boolean result;
 * byte(1 byte)
 * short(2 byte)
 * int (4 bytes) EX: int salary;
 * long(8 bytes)
 * float (4 bytes)
 * double(8 bytes)
 * char(2 bytes)->UNICODE CHARACTER SET->0 TO 65535(0 to 255 c,c++)
 */

public class DataTypes 
{

	public static void main(String[] args) 
	{
		byte amount=50;
		short amount1=565;
		int salary=565699;
		long score=545456465;//considering as a INT DATA TYPE
		
		/*
		 * int is the default integral datatype in java
		 * If the value exceeds the int limit,then long
		 * datatype expect suffix either L or l.
		 */
		
		long score1=45345435435L;//now its exactly as LONG!
		
		long rating=4L;//long data type
		
		boolean attendance=false;
		
		String name="Karpagavalli";//Built in class
		String location="Tambaram" + " "+" Tamilnadu" + " "+" India";
		
		//C,C++=>ASCII CHARACTER SET, 1 bytes
		//JAVA=>UNICODE CHARACTER SET , 2 BYTES , 0 TO 65535(stand alone application+enterprise(web) application)

		char grade='A';
		System.out.println("Attendance:: "+attendance);
		System.out.println("Integral values:: "+amount + " "+amount1 + " "+salary+ " "+score + " "+rating + " "+score1);
	
		System.out.println("Grade:: "+grade + " "+"Name:: "+name + " "+"Location:: "+location);

		//default floating point is DOUBLE!!!
		//suffix F or f is mandatory for float values!!
		//double suffix D or d is optional!

		float price=5600.50f;
		double rate=56050.34;//d is optional
		double rate1=56050.34D;//d is optional

		float rate2=4545;//no decimal points so suffix f is not required
		System.out.println("Floating point:: "+price+ " "+rate+ " "+rate1+ " "+rate2);
			
	}

}
=================================================================================================
package myprograms;

import java.util.Scanner;

public class Inputs 
{
	public static void main(String[] args) 
	{
		Scanner s1=new Scanner(System.in);//in is a reserved object of InputStream(java.io)

		System.out.println("Enter ENO:: ");
		int eno=s1.nextInt();
		
		s1.nextLine();
		
		System.out.println("Enter Employeename:: ");
		//String name=s1.next();//considered the spaces (only first value considered)!
		String name=s1.nextLine();
		
		System.out.println("Enter Salary: ");
		float salary=s1.nextFloat();

		System.out.println("Emp::: " +eno+ " "+name+ " "+salary);
		System.out.printf("%d %s %f", eno,name,salary);//similar to native c language
		System.out.printf("%n %b",(13>45));//n=>new line,b=>boolean

	}

}
==============================================================================================
package myprograms;
/*
 * In Java, there are two types of casting:
Widening or implicit Casting (automatically) - converting a smaller type to a larger type size. 
byte -> short -> char -> int -> long -> float -> double.
Narrowing or explicitCasting (manually) - converting a larger type to a smaller size type. 
double -> float -> long -> int -> char -> short -> byte.
 */

public class TypeConversion 
{
	public static void main(String[] args) 
	{
		//implicit conversion
		int i=100;
		long a=i;
		float b=a;
		System.out.println(i + " "+a + " "+b);	
		
		int i1=34349958;
		byte b1=(byte)i1;
		//explicit type casting
		System.out.println(i1 + " "+b1);//data truncated and lost!!!
				
		byte b2=55;
		float f1=4343.43f;
		float f2=b2*f1;//expression type promotion!!
		System.out.println(b2 + " "+f1+ " "+f2);
		
		System.out.println(534535.453453);//by default it is Double
		System.out.println((float)534535.453453);//convert  double to float
	
		//valid=>convert to UNICODE CHARACTER SET
		//A-Z 65-90, a-z 97-122

		char a3=65;
		char b3=97;
		System.out.println("Char:: "+a3+ " "+b3);

		//Increment and decrement in char data type!
		a3++;//66
		b3++;//66
		System.out.println("Char(++):: "+a3+ " "+b3);

		a3--;//65
		b3--;//65
		System.out.println("Char(--):: "+a3+ " "+b3);
		
		int n=90;
		char b11=(char)n;
		System.out.println("Char:: "+b11);

	}

}
==================================================================================================